// Pipeline
lock(label: 'adgt_test_harness_boards') {
    @Library('sdgtt-lib@rpi-support') _ // Not necessary when we turn on global libraries :)
    def hdlBranch = "NA"
    def linuxBranch = "NA"
    def bootPartitionBranch = "release"
    def bootfile_source = 'artifactory' // options: sftp, artifactory, http, local
    def harness = getGauntlet(hdlBranch, linuxBranch, bootPartitionBranch, firmwareVersion, bootfile_source)
  
    //Udpate repos
    harness.set_env('nebula_repo', 'https://github.com/sdgtt/nebula.git')
    harness.set_env('nebula_branch','rpi-support')
    harness.set_env('nebula_config_branch','rpi-support')
    harness.set_env('libiio_branch', 'v0.23')
    harness.set_env('telemetry_repo', 'https://github.com/sdgtt/telemetry.git')
    harness.set_env('telemetry_branch', 'master')
    harness.set_env('matlab_release','R2023b')
  
    //Update agent with required deps
    harness.set_required_agent(["sdg-nuc-01"])
    harness.update_agents()
  
    //Set other test parameters
    harness.set_nebula_debug(true)
    harness.set_enable_docker(true)
    harness.set_docker_host_mode(false)
    harness.set_send_telemetry(false)
    harness.set_enable_resource_queuing(true)
    harness.set_required_hardware(["adis16480bmlz"])
    harness.set_docker_args(['Vivado', 'MATLAB'])
    harness.set_nebula_local_fs_source_root("artifactory.analog.com")
  
    // Set stages (Stages are run sequentially on agents.)
    // harness.add_stage(harness.stage_library("UpdateBOOTFiles"), 'stopWhenFail',
    //                   harness.stage_library("RecoverBoard"))
  
    // Test stage
    harness.set_matlab_commands(["addpath(genpath('test'))",
                                    "runHWTests(getenv('board'))"])
    harness.add_stage(harness.stage_library("MATLABTests"),'continueWhenFail')
  
    // Send results
    // harness.add_stage(harness.stage_library('SendResults'),'continueWhenFail')
  
    // Go go
    harness.run_stages()
}
